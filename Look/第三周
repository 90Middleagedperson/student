搭建新的教学环境

一  构建两台虚拟机 
真机:
[root@room9pc01 ~]# ls /usr/local/bin/clone-vm7
/usr/local/bin/clone-vm7

[root@room9pc01 ~]# clone-vm7 #快速产生新的虚拟机rhel7.4
Enter VM number: 8

[root@room9pc01 ~]# clone-vm7 #快速产生新的虚拟机rhel7.4
Enter VM number: 9

##################################################
二 配置虚拟机
    利用root用户  密码:123456  登陆两台虚拟机

  虚拟机A:                         
    1.查看系统的版本 cat /etc/redhat-release   
    2.查看主机名,配置永久主机名:svr7.tedu.cn
  RHEL7.4中修改/etc/hostname当前不生效,下一次开机才会生效
    3.配置eth0网卡地址: 192.168.4.7/24

  虚拟机B:
    1.查看系统的版本 cat /etc/redhat-release   
    2.查看主机名,配置永久主机名:pc207.tedu.cn
  RHEL7.4中修改/etc/hostname当前不生效,下一次开机才会生效
    3.配置eth0网卡地址: 192.168.4.207/24

#################################################
三  真机远程管理虚拟机A与虚拟机B

[root@room9pc01 ~]# ssh -X root@192.168.4.7
[root@room9pc01 ~]# ssh -X root@192.168.4.207

[root@room9pc01 ~]# vim /root/.bashrc
 alias goa='ssh -X root@192.168.4.7'
 alias gob='ssh -X root@192.168.4.207'

###############################################
四  为虚拟机A与虚拟机B搭建Yum仓库

   服务端:虚拟机A  
           1.搭建FTP服务   2.共享光盘所有内容

   1)图形将光盘内容,放入虚拟光驱中
  [root@svr7 ~]# mount /dev/cdrom  /mnt/
  mount: /dev/sr0 写保护，将以只读方式挂载
  [root@svr7 ~]# ls /mnt/

   2)安装vsftpd软件包
   # ls /mnt/Packages/vsftpd-3.0.2-22.el7.x86_64.rpm 
   # rpm -ivh /mnt/Packages/vsftpd-3.0.2-22.el7.x86_64.rpm
 
   # rpm -q vsftpd

   3)利用FTP共享光盘所有内容,默认共享路径下/var/ftp
  [root@svr7 ~]# mkdir /var/ftp/rhel7
  [root@svr7 ~]# ls /var/ftp/rhel7
  [root@svr7 ~]# cp -r /mnt/*  /var/ftp/rhel7/
   
   4)重起vsftpd服务验证:
  [root@svr7 ~]# systemctl restart vsftpd
  [root@svr7 ~]# systemctl enable vsftpd

  [root@svr7 ~]# firefox ftp://192.168.4.7/rhel7

   客户端:虚拟机B
[root@pc207 ~]# vim /etc/yum.repos.d/rhel7.repo
 [rhel7]
 name=rhel7
 baseurl=ftp://192.168.4.7/rhel7
 enabled=1
 gpgcheck=0

[root@pc207 ~]# yum repolist
[root@pc207 ~]# yum -y install xeyes


##############################################
虚拟机A书写Yum客户端文件
[root@svr7 ~]# vim /etc/yum.repos.d/rhel7.repo

 [rhel7]
 name=rhel7
 baseurl=ftp://192.168.4.7/rhel7
 enabled=1
 gpgcheck=0
        
[root@svr7 ~]# yum repolist


###############################################
真机上搭建服务端 ：
  1.众多的软件包   2.仓库数据文件  3.搭建FTP服务共享内容

  1）搭建FTP服务
  [root@room9pc01 ~]# rpm -q vsftpd
  vsftpd-3.0.2-22.el7.x86_64

  [root@room9pc01 ~]# systemctl restart vsftpd
  [root@room9pc01 ~]# systemctl enable vsftpd
   2)挂载光盘内容到/var/ftp/rhel7
  [root@room9pc01 ~]# ls /var/ftp/rhel7/

  [root@room9pc01 ~]# vim /etc/fstab 
  /var/lib/libvirt/images/iso/rhel-server-7.4-
  x86_64-dvd.iso /var/ftp/rhel7  iso9660 defaults 0 0

   /etc/fstab:文件内容不支持快捷方式 


   3)最终测试
  # firefox  ftp://192.168.4.254/rhel7

##################################################
扩展的几个应用
目录结构
• 认识Linux的目录层次:
– man hier

常见一级目录的用途
 /boot 存放系统引导必需的文件,包括内核、启动配置
 /bin、/sbin 存放各种命令程序
 /dev 存放硬盘、键盘、鼠标、光驱等各种设备文件
 /etc 存放Linux系统及各种程序的配置文件
 /root、/home/用户名 分别是管理员root、普通用户的默认家目录
 /var 存放日志文件、邮箱目录等经常变化的文件
 /proc 存放内存中的映射数据,不占用磁盘
 /tmp 存放系统运行过程中使用的一些临时文件


权限的数值表示
• 权限的数值化
– 基本权限:r = 4,w = 2,x = 1
– 附加权限:SUID = 4,SGID = 2,Sticky Bit = 1
• 采用数值形式设置权限
– chmod [-R] nnn 文档...
– chmod [-R] xnnn 文档..

[root@svr7 ~]# mkdir /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 750 /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 007 /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 777 /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 700 /nsd01
[root@svr7 ~]# ls -ld /nsd01

#################################################
历史命令
• 管理/调用曾经执行过的命令
– history:查看历史命令列表
– history -c:清空历史命令
– !n:执行命令历史中的第n条命令
– !str:执行最近一次以str开头的历史命令

• 调整历史命令的数量
[root@svr7 ~]# vim /etc/profile
HISTSIZE=1000


[root@svr7 ~]# history -c     #清空历史命令
[root@svr7 ~]# cat /etc/redhat-release 
[root@svr7 ~]# hostname
[root@svr7 ~]# history     #列出历史命令
  
[root@svr7 ~]# !cat   #执行最近一条以cat开头的历史命令

###############################################
自定义Yum仓库

 1.准备从互联网下载的软件包
    真机的数据传递到虚拟机A中
# scp /root/桌面/tools.tar.gz  root@192.168.4.7:/root/

 2.在虚拟机A中验证
# ls /root

 3.进行tar解包
[root@svr7 ~]# tar -xf /root/tools.tar.gz   -C /
[root@svr7 ~]# ls /
[root@svr7 ~]# ls /tools/
[root@svr7 ~]# ls /tools/other/

  4.生成仓库数据文件
[root@svr7 ~]# createrepo /tools/other/----createrepo --update
[root@svr7 ~]# ls /tools/other/

  5.书写yum客户端配置文件
[root@svr7 ~]# vim /etc/yum.repos.d/rhel7.repo
  .......
 [myrpm]
 name=myrpm
 baseurl=file:///tools/other    #指定本地路径
 enabled=1
 gpgcheck=0

[root@svr7 ~]# yum repolist 

##########################################

[root@svr7 ~]# ls /tools/other/
[root@svr7 ~]# yum -y install cmatrix  15:05上课
[root@svr7 ~]# rpm -q cmatrix
cmatrix-1.2a-1.i386

[root@svr7 ~]# rpm -ql cmatrix   #查询软件包的安装清单

[root@svr7 /]# yum -y install oneko
[root@svr7 ~]# oneko &     #放入后台运行

[root@svr7 /]# killall oneko    #杀死所有oneko

###############################################

• du,统计文件的占用空间
– du [选项]... [目录或文件]...
– -s:只统计每个参数所占用的总空间大小
– -h:提供易读容量单位(K、M等)

[root@svr7 /]# du -sh /root/ /etc/

[root@svr7 /]# du -sh /var

[root@svr7 /]# du -sh /var/ftp/rhel7/

[root@svr7 /]# du -sh /boot


• date,查看/调整系统日期时间
– date +%F、date +%R
– date +"%Y-%m-%d %H:%M:%S"
– date -s "yyyy-mm-dd HH:MM:SS"

[root@svr7 /]# date
[root@svr7 /]# date +%Y    #显示年份

[root@svr7 /]# date +%m    #显示月份

[root@svr7 /]# date +%d    #显示日期

[root@svr7 /]# date +%Y-%m-%d  #显示 年-月-日

[root@svr7 /]# date +%F

[root@svr7 /]# date +%H:%M   #显示 时与分

#############################################
vim编辑技巧

命令模式操作

	Home 键 或 ^、数字 0          跳转到行首
	End 键 或“$”键 		  跳转到行尾
	1G 或 gg 			 跳转到文件的首行
	G 					 跳转到文件的末尾行

	复制 yy、#yy 			复制光标处的一行、#行
	粘贴 p、P 			粘贴到光标处之后、之前
	x 或 Delete键 		删除光标处的单个字符
	dd、#dd 				删除光标处的一行、#行
	d^ 					从光标处之前删除至行首
	d$ 					从光标处删除到行尾

[root@svr7 /]# cp /etc/passwd /opt/1.txt
[root@svr7 /]# vim /opt/1.txt

	/word 		向后查找字符串“word”
	n、N 		跳至后/前一个结果
	u 			撤销最近的一次操作
	Ctrl + r 	取消前一次撤销操作
	ZZ(大写) 	保存修改并退出



末行模式操作
        :q!                  放弃已有更改后强制退出
        :wq 或 :x             保存已有修改后退出
        :r /etc/filesystems  读入其他文件内容

[root@svr7 /]# echo 123 > /opt/1.txt
[root@svr7 /]# echo abc > /opt/2.txt
[root@svr7 /]# vim  /opt/1.txt
          :r /opt/2.txt   #读入/opt/2.txt到当前文件中
          :r /etc/passwd  #读入/etc/passwd到当前文件中

字符串替换
	:s/root/abc        替换当前行第一个“root”
	:s/root/abc/g      替换当前行所有的“root”
	:1,10 s/root/abc/g 替换第1-10行所有的“root”
	:% s/root/abc/g    替换文件内所有的“root

[root@svr7 /]# rm -rf /opt/1.txt 
[root@svr7 /]# cp /etc/passwd /opt/1.txt
[root@svr7 /]# vim /opt/1.txt


开关参数的控制
	:set nu|nonu    显示/不显示行号
	:set ai|noai    启用/关闭自动缩进

################################################
补充:vim 缓存文件的产生

     发现交换文件,恢复正常 删除交换文件

################################################
源码编译安装

• 主要优点
– 获得软件的最新版,及时修复bug
– 软件功能可按需选择/定制,有更多软件可供选择
– 源码包适用各种平台

  rpm包:   rpm -ivh    yum  install


    源码包----gcc make---->可以执行的程序------------>运行安装


步骤1:安装gcc与make
[root@svr7 ~]# yum -y install  gcc  make

步骤2:tar解包,释放源代码至指定目录
# ls /tools/

# tar -xf /tools/inotify-tools-3.13.tar.gz  -C  /
# ls /
# ls /inotify-tools-3.13/

步骤3:  ./configure 配置,指定安装目录/功能模块等选项
                                 作用1:检测系统是否安装gcc与make
                                 作用2:指定安装目录/功能

# cd /inotify-tools-3.13/
# ./configure  --prefix=/opt/myrpm   #指定安装位置

常见的提示:没有安装gcc
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details.

步骤4:make 编译,生成可执行的二进制程序文件
[root@svr7 inotify-tools-3.13]# make

步骤5:make install 安装,将编译好的文件复制到安装目录
[root@svr7 inotify-tools-3.13]# make install

[root@svr7 inotify-tools-3.13]# ls /opt/
[root@svr7 inotify-tools-3.13]# ls /opt/myrpm/
[root@svr7 inotify-tools-3.13]# ls /opt/myrpm/bin/

#################################################
实用小命令工具(续2)
• ln,创建软连接
– 软连接 --> 原始文档 --> i节点 --> 文档数据
– ln -s 原始文件或目录   软连接文件

   若原始文件或目录被删除,连接文件将失效
   软连接可存放在不同分区/文件系统

• ln,创建硬连接
– 硬连接 --> i节点 --> 文档数据
– ln 原始文件 硬连接文件

  若原始文件被删除,连接文件仍可用
  硬连接与原始文件必须在同一分区/文件系统             


##############################################
制作快捷方式:
[root@svr7 /]# ln -s /路径/源文件   /路径/快捷方式

[root@svr7 /]# cat /etc/redhat-release 
[root@svr7 /]# ln -s /etc/redhat-release /opt/test
[root@svr7 /]# ls /opt

[root@svr7 /]# ls -l /opt/test 
[root@svr7 /]# cat /opt/test

##############################################
  i节点:硬盘存储空间的一个编号

[root@svr7 opt]# ls -i    #查看i节点
 
    读取数据的过程:   首先找到源文件----->i节点编号   
                              通过编号----->存储的区域   取得数据

[root@svr7 opt]# rm -rf /opt/*
[root@svr7 opt]# ls /opt/

[root@svr7 opt]# echo 123 > /opt/A
[root@svr7 opt]# ls /opt/

[root@svr7 opt]# ln -s /opt/A  /opt/B  #制作软连接
[root@svr7 opt]# ls /opt/

[root@svr7 opt]# ln /opt/A  /opt/C   #制作硬连接
[root@svr7 opt]# ls /opt/

[root@svr7 opt]# ls -i /opt/
[root@svr7 opt]# cat /opt/C


检测Yum是否可用
[root@svr7 ~]# yum clean all
[root@svr7 ~]# yum repolist 

###############################################

DNS服务器的功能
– 正向解析:根据注册的域名查找其对应的IP地址
– 反向解析:根据IP地址查找对应的注册域名,不常用


  所有完整的域名都必须以点结尾   

            根域名:  .  

顶级域名:   .cn    .us   .jp   .kr  .tw  .hk ......


二级域名:   .com.cn   .net.cn  .org.cn  .tedu.cn    


三级域名:   .nb.com.cn  .haxi.com.cn  .xixi.com.cn

   
完整域名(FQDN): www.nb.com.cn  ftp.nb.com.cn 



• BIND服务器端程序     
– 系统服务:named
– 默认端口:TCP/UDP 53
– 运行时的虚拟根环境:/var/named/chroot/

• 主配置文件:/etc/named.conf    指定本机负责解析的域名
• 地址库文件:/var/named/        完整的域名与IP对应关系    

• NS,域名服务器(Name Server)记录
• A,地址(Address)记录,仅用于正向解析区域


       
##################################################
搭建基本DNS服务

虚拟机A:
1.安装软件包
[root@svr7 ~]# yum -y install bind-chroot bind
bind-9.9.4-29.el7.x86_64   //域名服务包
bind-chroot-9.9.4-29.el7.x86_64   //提供虚拟根支持 牢笼

2.修改配置文件/etc/named.conf
[root@svr7 ~]# cp /etc/named.conf  /root/named.bak
[root@svr7 ~]# vim /etc/named.conf
 options {
    directory       "/var/named";  #指定地址库文件路径
  };
  zone "tedu.cn" IN {         #指定本机负责解析的域名
        type master;          #本机为权威主DNS服务器
        file "tedu.cn.zone";  #指定地址库文件名字
  };

3.创建地址库文件/var/named/tedu.cn.zone
# cd  /var/named
# cp -p named.localhost  tedu.cn.zone  #保持属性不变
# ls -l tedu.cn.zone

# vim tedu.cn.zone            
 #没有以点结尾,默认补全tedu.cn.
 tedu.cn.    NS  svr7        #tedu.cn.区域有svr7负责
 svr7        A   192.168.4.7 #svr7的IP地址为192.168.4.7
 www         A   1.1.1.1
 ftp         A   2.2.2.2

4.重起named服务
# systemctl  restart  named

5.客户端验证
1.指定DNS服务器位置
# echo nameserver 192.168.4.7 > /etc/resolv.conf
2.域名解析测试
# nslookup www.tedu.cn 
# nslookup ftp.tedu.cn 
#################################################
多区域的DNS服务器
虚拟机A:
1.修改配置文件/etc/named.conf      
  ......
  zone "qq.com" IN {       
        type master;         
        file "qq.com.zone"; 
  };
3.创建地址库文件/var/named/qq.com.zone
# cd  /var/named
# cp -p tedu.cn.zone  qq.com.zone 
# vim qq.com.zone           
 qq.com.     NS  svr7      
 svr7        A   192.168.4.7
 www         A   3.3.3.3
 ftp         A   4.4.4.4
4.重起named服务
# systemctl  restart  named          

5.客户端验证
1.指定DNS服务器位置
# echo nameserver 192.168.4.7 > /etc/resolv.conf
2.域名解析测试
# nslookup www.qq.com
# nslookup ftp.qq.com

################################################
特殊的解析记录,以tedu.cn.zone为例

一 DNS的负载均衡,轮询的相同解析记录(了解)

[root@svr7 /]# vim /var/named/tedu.cn.zone
tedu.cn.    NS  svr7
svr7        A   192.168.4.7
www         A   192.168.4.1
www         A   192.168.4.2
www         A   192.168.4.3
www         A   192.168.4.4
ftp         A   2.2.2.2

[root@svr7 /]# !sys
systemctl restart named

二 泛域名解析
[root@svr7 /]# vim  /var/named/tedu.cn.zone
.......

*           A   10.11.12.14
[root@svr7 /]# !sys
systemctl restart named

客户端验证:
[root@pc207 /]# nslookup wwwwww.tedu.cn
[root@pc207 /]# nslookup hahaxixi.tedu.cn

三 解析记录的别名(了解)
[root@svr7 /]# vim /var/named/tedu.cn.zone 
 .......

 tts      CNAME     ftp   #tts解析结果与ftp解析结果一致
    
[root@svr7 /]# !sys
systemctl restart named

客户端验证
[root@pc207 ~]# nslookup tts.tedu.cn


四   有规律的泛域名解析

       pc1.tedu.cn ----> 192.168.10.1
       pc2.tedu.cn ----> 192.168.10.2
       pc3.tedu.cn ----> 192.168.10.3
             ......
       pc50.tedu.cn ----> 192.168.10.50

   内置函数: $GENERATE   产生连续的数字

[root@svr7 /]# vim /var/named/tedu.cn.zone 
  .......

 $GENERATE   1-50   pc$    A   192.168.10.$

[root@svr7 /]# !sys
systemctl restart named
[root@svr7 /]# 

客户端验证
[root@pc207 ~]# nslookup pc1.tedu.cn
[root@pc207 ~]# nslookup pc2.tedu.cn
[root@pc207 ~]# nslookup pc18.tedu.cn
[root@pc207 ~]# nslookup pc50.tedu.cn
##############################################
DNS服务器常见的资源解析记录都有那些?
  NS解析记录    A解析记录     CNAME解析记录

###############################################
DNS子域授权 ,qq.com域名为例
   
            父域:www.qq.com

            子域:www.bj.qq.com

            父域的DNS服务器为虚拟机A,负责解析qq.com       
  
            子域的DNS服务器为虚拟机B,负责解析bj.qq.com  

虚拟机B
1.安装软件包
[root@pc207 ~]# yum -y install bind-chroot  bind
2.修改配置文件/etc/named.conf
[root@pc207 ~]# cp /etc/named.conf  /root/named.bak
[root@pc207 ~]# vim /etc/named.conf
 options {
    directory       "/var/named";  #指定地址库文件路径
  };
  zone "bj.qq.com" IN {         #指定本机负责解析的域名
        type master;            #本机为权威主DNS服务器
        file "bj.qq.com.zone";  #指定地址库文件名字
  };
3.创建地址库文件/var/named/bj.qq.com.zone
# vim    bj.qq.com.zone      
 bj.qq.com.  NS  pc207        
 pc207       A   192.168.4.207 
 www         A   5.5.5.5
4.重起named服务
# systemctl  restart  named
###############################################
子域授权
  通过父域的DNS服务器为虚拟机A,能够解析www.bj.qq.com
虚拟机A:
[root@svr7 /]# vim /var/named/qq.com.zone
 qq.com.     NS  svr7
 bj.qq.com.  NS  pc207
 svr7        A   192.168.4.7
 pc207       A   192.168.4.207
 www         A   3.3.3.3
 ftp         A   4.4.4.4
[root@svr7 /]#systemctl restart named
[root@pc207 /]# nslookup www.bj.qq.com 192.168.4.7
Server:		192.168.4.7
Address:	192.168.4.7#53

Non-authoritative answer:   #非权威解答
Name:	www.bj.qq.com
Address: 5.5.5.5
 


递归查询: 
     客户端向首选DNS服务器寻求解析,首选DNS服务器与其他DNS服务器交互,最终将解析结果,带回来的过程

  options {
        directory       "/var/named";
        recursion  no;    #禁止递归
    };

[root@pc207 /]# dig  www.bj.qq.com  192.168.4.7


迭代查询：首选DNS服务器与其他DNS服务器交互

################################################
直接起到DNS解析的功能(只能对本机解析) 
  /etc/hosts 主机名映射文件（本地主机名与IP地址对应关系）

[root@svr7 /]# vim /etc/hosts
[root@svr7 /]# tail -1 /etc/hosts
192.168.4.110   www.360.com

[root@svr7 /]# ping www.360.com

    /etc/hosts(DNS解析过程中，最高优先级)

客户端解析域名顺序：
      1./etc/hosts
      2./etc/resolv.conf
           3.找寻DNS服务器
###############################################

缓存DNS: 利用内存进行缓存解析记录，加速解析

真机搭建缓存DNS服务器
1.搭建Yum仓库
[root@room9pc01 ~]# cat /etc/redhat-release 
CentOS Linux release 7.4.1708 (Core) 
[root@room9pc01 ~]# ls /iso/
CentOS-7-x86_64-DVD-1708.iso
[root@room9pc01 ~]# mkdir /dvd/
[root@room9pc01 ~]# mount /iso/CentOS-7-x86_64-DVD-1708.iso    /dvd/

# ls  /dvd/
# cd  /etc/yum.repos.d/
# mkdir  repo
# mv   *.repo   repo
# vim   dvd.repo
  [dvd]
  name=CentOS7.4
  baseurl=file:///dvd    #指定本地Yum
  enabled=1
  gpgcheck=0

# yum -y install  bind  bind-chroot

2.查看达内   内网DNS服务器地址
[root@room9pc01 /]# cat  /etc/resolv.conf 
nameserver  172.40.1.10
[root@room9pc01 /]#          

3.修改DNS服务器主配置文件，指定转发给内网DNS服务器
[root@room9pc01 /]# vim /etc/named.conf 
  options {
           directory       "/var/named";
           forwarders   {  172.40.1.10;  };
   };

4. 重起named服务
[root@room9pc01 /]# systemctl restart named

5.在虚拟机上验证：
[root@svr7 /]# nslookup www.taobao.com 192.168.4.254


检测Yum是否可用
[root@svr7 ~]# yum clean all
[root@svr7 ~]# yum repolist 

###############################################
Split分离解析(视图解析)          

什么是分离解析
• 当收到客户机的DNS查询请求的时候
 – 能够区分客户机的来源地址
 – 为不同类别的客户机提供不同的解析结果(IP地址)
 – 为不同的客户端，提供最近最适合的服务器

• 根据源地址集合将客户机分类
– 不同客户机获得不同结果(待遇有差别)

注意事项：
1.客户端必须找到，自己的分类，需要管理员分类合理
2.view客户端由上及下，匹配及停止
3.所有的zone都必须在view中

	view  "haha"   {
	 match-clients  {  192.168.4.207;  };
	  zone "12306.cn"  IN {
	    ...... 地址库1;
	    };                                                
         };                           
	view  "xixi"   {
	 match-clients  {  192.168.4.110;   };
	  zone "12306.cn" IN {
	    ...... 地址库2;
	   }; 
         }; 
    view  "hehe"   {
	 match-clients  {  any;   };
	  zone "12306.cn" IN {
	    ...... 地址库3;
	   }; 
         }; 




##########################################
案例需求及要点
• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn
– A记录分离解析 —— 以 www.tedu.cn 为例
客户机来自 解析结果
     192.168.4.207----------》 192.168.4.100
     其他地址          ----------》 1.2.3.4
 view nsd {                      
  match-clients  {  192.168.4.207;  };
   zone "tedu.cn" {
      type master;
      file "tedu.cn.zone";
   };
 };
 view other {
  match-clients {  any;  };
   zone "tedu.cn" {
      type master;
      file "tedu.cn.other";
    };
 };
 请去建立相应的地址库文件,写入不同的解析结果

################################################3
acl地址列表
• 为大批量的客户机地址建立列表
  acl "liantong" {
     IP地址1; IP地址2; .. ..
         网段1; 网段2; .. ..
      .. ..
      };
  acl "tietong" {
    IP地址3; IP地址4; .. ..
       网段3; 网段4; .. ..
       .. ..
    };


 acl test { 192.168.4.207; 192.168.4.1;
           192.168.4.2; 192.168.4.3;
    };

 view nsd {
 match-clients { test; };
  zone "tedu.cn" {
      type master;
      file "tedu.cn.zone";
    };
  };

###############################################
补充:多区域的分离解析
  每一个view中,zone的个数保持一致,域名的个数保持一致

[root@svr7 /]# vim /etc/named.conf
options {
	directory 	"/var/named";
};
acl test { 192.168.4.207; 192.168.4.1;
             192.168.4.2;   192.168.4.3;
        };

view nsd {
 match-clients { test; };
  zone "tedu.cn" {
      type master;
      file "tedu.cn.zone";
   };
  zone "sina.com" {
      type master;
      file "sina.com.zone";
   };
};
view other {
 match-clients { any; };
  zone "tedu.cn" {
      type master;
      file "tedu.cn.other";
   };
  zone "sina.com" {
      type master;
      file "sina.com.other";
   };
};

 请去建立相应的地址库文件,写入不同的解析结果

##############################################
RAID磁盘阵列

RAID阵列概述
• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同


• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率
– 至少由两块磁盘组成


• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少由两块磁盘组成


• RAID5,高性价比模式
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少由三块磁盘组成

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少由四块磁盘组成

RAID0/1/10
• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少由四块磁盘组成

#################################################
进程管理

     程序：静态的代码，仅占硬盘空间

     进程：动态的代码，占用CPU、内存资源

   PID：进程的编号  
 
      父进程/子进程   

#########################################    
查看进程树
• pstree — Processes Tree
– 格式:pstree [选项] [PID或用户名]

• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号
  systemd:上帝进程是所有进程的父进程  PID编号为1
[root@svr7 ~]# pstree 
[root@svr7 ~]# pstree   lisi
bash───vim
[root@svr7 ~]# pstree -p lisi
bash(13952)───vim(13996)
[root@svr7 ~]# pstree -ap lisi


查看进程快照
• ps — Processes Snapshot
– 格式:ps [选项]...

• 常用命令选项
– aux:显示当前终端所有进程(a)、当前用户在所有
终端下的进程(x), 以用户格式输出(u)
– -elf:显示系统内所有进程(-e)、以长格式输出(-l)
信息、包括最完整的进程信息(-f)


  ps  aux:输出进程信息非常详细
     – 列出正在运行的所有进程


  ps  -elf:输出进程信息比较详细，有该进程的父进程信息
     – 列出正在运行的所有进程

   PPID:父进程的PID号

################################################
 补充： wc统计

 请统计Linux一共有多少个用户？ 
[root@svr7 ~]# wc -l /etc/passwd  #统计有多少行
 42 /etc/passwd

 请统计/etc目录下以tab结尾的文件，一共有多少个？ 
# find /etc/ -name "*tab"  -type  f 
# find /etc/ -name "*tab"  -type  f   | wc -l

 请统计/etc目录下以 .conf 结尾的文件，一共有多少个？
# find /etc/ -name "*.conf"  -type f  
# find /etc/ -name "*.conf"  -type f   |  wc -l

 请统计Linux正在运行的进程，一共有多少个？
[root@svr7 ~]# ps aux | wc -l


###############################################
进程动态排名
• top 交互式工具
– 格式:top [-d 刷新秒数] [-U 用户名]

   按键盘上  P（大写）按照CPU排序
   按键盘上  M（大写）按照内存排序


检索进程
• pgrep — Process Grep
– 用途:pgrep [选项]... 查询条件

• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -t:检索指定终端的进程
– -x:精确匹配完整的进程名


[root@svr7 ~]# who  #当前系统有哪些用户正在登陆

       pts：图形命令行终端

[root@svr7 ~]# pgrep  crond
[root@svr7 ~]# pgrep  -l crond
[root@svr7 ~]# pgrep  -l log 
[root@svr7 ~]# pgrep -lU lisi

[root@svr7 ~]# pgrep -lU lisi -t pts/3
[root@svr7 ~]# pgrep -lU lisi -t pts/2

###############################################
控制进程
• 后台启动
– 在命令行末尾添加“&”符号,(运行并转入后台)
• Ctrl + z 组合键
– 挂起当前进程(暂停并转入后台)
• jobs 命令
– 查看后台任务列表
• fg 命令
– 将后台任务恢复到前台运行
• bg 命令
– 激活后台被挂起的任务


[root@svr7 ~]# sleep 800 &   #运行放入后台
[root@svr7 ~]# jobs          #查看后台运行的进程
[root@svr7 ~]# sleep 1000
^Z                       #按键盘上  Ctrl + Z 暂停放入后台
[2]+  已停止               sleep 1000
[root@svr7 ~]# jobs   #查看后台运行的进程
[root@svr7 ~]# bg 2   #将后台编号为2的进程继续运行
[root@svr7 ~]# jobs
[root@svr7 ~]# fg 2   #将后台编号为2的进程，恢复到前台
sleep 1000
^C                    #按键盘上  Ctrl + C 结束
[root@svr7 ~]# jobs 
[root@svr7 ~]# fg 1   #将后台编号为1的进程，恢复到前台
sleep 800
^C                    #按键盘上  Ctrl + C 结束
[root@svr7 ~]# jobs

################################################
杀死进程
• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9] PID... 
– killall [-9] 进程名...
– pkill 查找条件

[root@svr7 ~]# sleep 800 &
[root@svr7 ~]# sleep 900 &
[root@svr7 ~]# jobs 
[root@svr7 ~]# jobs -l

[root@svr7 ~]# kill 15519
[root@svr7 ~]# jobs -l
[root@svr7 ~]# killall sleep
[root@svr7 ~]# jobs -l

################################################
日志概述

• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的“依据

内核及系统日志
• 由系统服务rsyslog统一记录/管理

• 常见的日志文件
  /var/log/messages  记录内核消息、各种服务的公共消息
  /var/log/dmesg     记录系统启动过程的各种消息
  /var/log/cron      记录与cron计划任务相关的消息
  /var/log/maillog   记录邮件收发相关的消息
  /var/log/secure    记录与访问限制相关的安全消息


日志分析

     tailf:实时跟踪日志

• 通用分析工具
– tail、tailf、less、grep等文本浏览/检索命令
– awk、sed等格式化过滤工具

用户登录分析
• users、who、w 命令
– 查看已登录的用户信息,详细度不同

• last、lastb 命令
– 查看最近登录成功/失败的用户信息

[root@svr7 ~]# users
[root@svr7 ~]# who
[root@svr7 ~]# w

[root@svr7 ~]# last -2    #最近登陆成功的2条用户信息
[root@svr7 ~]# lastb -2   #最近登陆失败的2条用户信息



日志消息的优先级
• Linux内核定义的事件紧急程度        
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要
 
  0  EMERG（紧急）        会导致主机系统不可用的情况
  1  ALERT（警告）         必须马上采取措施解决的问题
  2  CRIT（严重）	        比较严重的情况
  3  ERR（错误）	       运行出现错误
  4  WARNING（提醒）    可能会影响系统功能的事件
  5  NOTICE（注意）      不会影响系统但值得注意
  6  INFO（信息）	       一般信息
  7  DEBUG（调试）       程序或系统调试信息等


使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志

• 常见用法
– journalctl | grep 关键词
– journalctl -u 服务名   [-p 优先级]
– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --
until="yyyy-mm-dd HH:MM:SS"

[root@svr7 ~]# yum -y install httpd
[root@svr7 ~]# systemctl restart httpd

#查看关于httpd服务日志
[root@svr7 ~]# journalctl -u httpd  

##############################################
systemctl控制

• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合

对于服务的管理
 systemctl restart  服务名   #重起服务
 systemctl start  服务名       #开启服务
 systemctl stop  服务名         #停止服务
 systemctl status  服务名     #查看服务当前的状态
 
 systemctl enable  服务名      #设置服务开机自启动
 systemctl disable  服务名    #设置服务不开机自启动
 systemctl enable  服务名 


#查看是否开机自启动
[root@svr7 /]# systemctl is-enabled httpd  
disabled  #禁止开机启动
[root@svr7 /]# systemctl enable httpd

[root@svr7 /]# systemctl is-enabled httpd
enabled  #允许开机启动
[root@svr7 /]#



systemd
• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖

– 服务目录:/lib/systemd/system/

[root@svr7 /]# vim /lib/systemd/system/httpd.service



RHEL6:运行级别   200 

         0：关机     0
         1：单用户模式（基本功能的实现，破解Linux密码）50 
	 2：多用户字符界面（不支持网络） 80
	 3：多用户字符界面（支持网络）服务器默认的运行级别  100
	 4：未定义
	 5：图形界面    190
	 6：重起   0
   
    切换运行级别：init  数字    
 



RHEL7：运行模式

   字符模式：multi-user.target
   图形模式：graphical.target

当前直接切换到图形模式
[root@svr7 /]# systemctl isolate graphical.target
当前直接切换到字符模式
[root@svr7 /]# systemctl isolate multi-user.target

查看每次开机默认进入模式
# systemctl get-default
 multi-user.target

设置永久策略，每次开机自动进入graphical.target
# systemctl set-default graphical.target 
# reboot 
#################################################

DNS与Web结合实验：           

一、搭建虚拟机C与虚拟机D
真机：
[root@room9pc01 ~]# clone-vm7 
Enter VM number: 1

[root@room9pc01 ~]# clone-vm7 
Enter VM number: 2

虚拟机C
虚拟机不需要配置IP地址
利用 virsh console 虚拟机名 可以直接链接     

[root@room9pc01 ~]# virsh console C
连接到域 C
换码符为 ^]
Red Hat Enterprise Linux Server 7.4 (Maipo)
Kernel 3.10.0-693.el7.x86_64 on an x86_64

localhost login: root
密码：
Last login: Tue Jan 30 12:29:01 on :0
[root@localhost ~]# 配置IP地址
[root@localhost ~]# exit
登出

Red Hat Enterprise Linux Server 7.4 (Maipo)
Kernel 3.10.0-693.el7.x86_64 on an x86_64

localhost login:   Ctrl + ]   #回到真机

[root@localhost ~]# echo C.tedu.cn > /etc/hostname
[root@localhost ~]# hostname C.tedu.cn
[root@localhost ~]# exit
登出
Connection to 192.168.4.10 closed.
[root@room9pc01 ~]# ssh -X root@192.168.4.10
root@192.168.4.10's password: 
Last login: Wed Oct 24 08:46:48 2018 from 192.168.4.254
[root@C ~]# 

虚拟机D进行配置如上


虚拟机搭建Yum：
[root@pc207 ~]# for i  in 10  20
> do
> scp /etc/yum.repos.d/rhel7.repo root@192.168.4.$i:/etc/yum.repos.d/
> done

##################################################
虚拟机C：搭建Web
[root@C ~]# yum -y install httpd
[root@C ~]# vim /etc/httpd/conf.d/nsd01.conf
[root@C ~]# cat /etc/httpd/conf.d/nsd01.conf
<VirtualHost *:80>
  ServerName www.qq.com
  DocumentRoot /var/www/qq
</VirtualHost>
<VirtualHost *:80>
  ServerName www.163.com
  DocumentRoot /var/www/163
</VirtualHost>
[root@C ~]# mkdir /var/www/qq /var/www/163
[root@C ~]# echo '<h1>Web1 QQ' > /var/www/qq/index.html
[root@C ~]# echo '<h1>Web1 163' > /var/www/163/index.html
[root@C ~]# systemctl restart httpd


虚拟机Svr7搭建DNS分离解析
[root@svr7 ~]# vim  /etc/named.conf 
options {
	directory 	"/var/named";
};

view nsd {
 match-clients { 192.168.4.7; };
  zone "qq.com" {
      type master;
      file "qq.com.zone";  ----》192.168.4.10
   };
  zone "163.com" {
      type master;
      file "163.com.zone"; ----》192.168.4.10
   };
};
view other {
 match-clients { any; };
  zone "qq.com" {
      type master;
      file "qq.com.other";----》192.168.4.20
   };
  zone "163.com" {
      type master;
      file "163.com.other";----》192.168.4.20
   };
};
[root@svr7 ~]# cd /var/named/
[root@svr7 named]# 建立相应地址库文件 写入不同的解析结果
[root@svr7 ~]# systemctl restart named


所有虚拟机DNS服务器，指向虚拟机A
 echo nameserver 192.168.4.7 > /etc/resolv.conf 

################################################
部署DHCP服务器
• Dynamic Host Configuration Protocol
– 动态主机配置协议,由 IETF(Internet 网络工程师任
务小组)组织制定,用来简化主机地址分配管理

• 主要分配以下入网参数
– IP地址/子网掩码/广播地址
– 默认网关地址、DNS服务器地址

• DHCP地址分配的四次会话（广播进行，先到先得）
– DISCOVERY --> OFFER --> REQUEST -->ACK

    在一个网络中只能有一台DHCP


• 装软件包 dhcp
• 配置文件 /etc/dhcp/dhcpd.conf
• 起服务 dhcpd

虚拟机A：
1.安装软件包
[root@svr7 /]# yum -y install dhcp
2.修改配置文件
[root@svr7 /]# vim  /etc/dhcp/dhcpd.conf 
    #读入其他文件内容
  :r /usr/share/doc/dhcp*/dhcpd.conf.example

subnet 192.168.4.0 netmask 255.255.255.0 { 分配的网段
  range 192.168.4.20 192.168.4.100;     分配范围
  option domain-name-servers 192.168.4.7; 分配DNS服务器
  option routers 192.168.4.254;  分配网关地址
  default-lease-time 600;   默认租约时间
  max-lease-time 7200;      最大租约时间
}
3.重起服务
[root@svr7 /]# systemctl restart dhcpd 

################################################
网络装机概述

网络装机的优势
• 规模化:同时装配多台主机
• 自动化:装系统、配置各种服务
• 远程实现:不需要光盘、U盘等物理安装介质

• 需要哪些服务组件?
– DHCP服务,分配IP地址、定位引导程序
– TFTP服务,提供引导程序下载
– HTTP服务,提供yum安装源

################################################
一、搭建配置DHCP服务

1.指定写一个服务器地址
[root@svr7 /]# vim /etc/dhcp/dhcpd.conf
subnet 192.168.4.0 netmask 255.255.255.0 {
  range 192.168.4.20 192.168.4.100;
  option domain-name-servers 192.168.4.7;
  option routers 192.168.4.254;
  default-lease-time 600;
  max-lease-time 7200;
  next-server  192.168.4.7;  #指定下一个服务器地址
  filename  "pxelinux.0";    #指定引导文件名称
}
2.重起服务
[root@svr7 /]# systemctl  restart  dhcpd

    pxelinux.0:网卡引导文件，安装说明书，二进制文件
                             安装一个软件，会自动生成该文件


二、配置TFTP服务

       tftp：简单的文件传输协议
             默认端口为：  69
             默认共享路径：/var/lib/tftpboot

1.安装tftp-server软件
[root@svr7 /]# yum -y install tftp-server

2.重起tftp服务
[root@svr7 /]# systemctl  restart  tftp
[root@svr7 /]# systemctl  enable   tftp

3.部署pxelinux.0文件
# yum  provides   */pxelinux.0  #查询那个软件包产生该文件
# yum -y  install  syslinux     #安装软件

# rpm -ql syslinux  |  grep pxelinux.0   #查看安装清单

# cp  /usr/share/syslinux/pxelinux.0  /var/lib/tftpboot/

# ls /var/lib/tftpboot/    
      
4.部署菜单文件
 默认存放路径/var/lib/tftpboot/pxelinux.cfg/

 pxelinux.0--》/var/lib/tftpboot/pxelinux.cfg/default

# mkdir /var/lib/tftpboot/pxelinux.cfg
# mount /dev/cdrom  /mnt
# ls /mnt/
# cp /mnt/isolinux/isolinux.cfg  /var/lib/tftpboot/pxelinux.cfg/default

# ls -l /var/lib/tftpboot/pxelinux.cfg/default
# chmod u+w /var/lib/tftpboot/pxelinux.cfg/default
# ls -l /var/lib/tftpboot/pxelinux.cfg/default

5.部署图形的模块(vesamenu.c32)与背景图片(splash.png)

[root@svr7 /]# cp /mnt/isolinux/vesamenu.c32 /mnt/isolinux/splash.png /var/lib/tftpboot/

[root@svr7 /]# ls /var/lib/tftpboot/
pxelinux.0  pxelinux.cfg  splash.png  vesamenu.c32

6.部署 启动内核（vmlinuz） 与  驱动程序（initrd.img）

[root@svr7 /]# cp /mnt/isolinux/vmlinuz /mnt/isolinux/initrd.img /var/lib/tftpboot/

[root@svr7 /]# ls /var/lib/tftpboot/
initrd.img  pxelinux.cfg  vesamenu.c32
pxelinux.0  splash.png    vmlinuz
[root@svr7 /]# 

7.修改菜单文件/var/lib/tftpboot/pxelinux.cfg/default

# vim /var/lib/tftpboot/pxelinux.cfg/default 

  1 default vesamenu.c32    #默认加载图形的模块
  2 timeout 60              #读秒时间为6秒
  9 menu background splash.png    #背景图片

 10 menu title NSD1809 PXE Server !!!  #标题

 60 label linux
 61   menu label Install RHEL7  #选项的内容
      menu  default             #读秒结束后默认选择
 62   kernel vmlinuz            #指定启动内核
 63   append initrd=initrd.img  #指定启动的驱动程序
################################################
总结：
 1.DHCP--->IP地址、next-server、filename
 2.tftp--->pxelinux.0
 3.pxelinux.0--->default
 4.default---》
          vesamenu.c32/splash.png/vmlinuz/initrd.img 


测试：新建一台虚拟机，采用PXE网络引导安装
         注意网络类型选择为：private1
##################################################
三、搭建httpd服务，共享光盘所有内容

1.安装软件包
[root@svr7 /]# yum -y install  httpd
2.重起服务
[root@svr7 /]# systemctl restart httpd

3.共享光盘所有内容
[root@svr7 /]# mkdir /var/www/html/rhel7/
[root@svr7 /]# mount /dev/cdrom  /var/www/html/rhel7/
mount: /dev/sr0 写保护，将以只读方式挂载
[root@svr7 /]# ls /var/www/html/rhel7/

4.访问测试
[root@svr7 /]# firefox 192.168.4.7/rhel7

###############################################
四、部署无人值守安装，生成应答文件

  1.通过图形的system-config-kickstart软件可以生成
  # yum -y install system-config-kickstart 

  2.运行图形的system-config-kickstart进行图形配置
 [root@room9pc01 ~]# ssh -X root@192.168.4.7
 root@192.168.4.7's password: 

 [root@svr7 ~]# system-config-kickstart
  首先检测  “软件包选择”  是否可以进行选择
  
  需要光盘的源的Yum仓库支持, 要求 仓库标识必须为 [development]
 [root@svr7 ~]# vim /etc/yum.repos.d/rhel7.repo
 [development]
   .......
                   
 [root@svr7 ~]# system-config-kickstart
  首先检测  “软件包选择”  是否可以进行选择

#################################################
五、应答文件     

[root@svr7 ~]# ls /root/ks.cfg 
/root/ks.cfg
[root@svr7 ~]# vim /root/ks.cfg

利用httpd服务，将应答文件共享
[root@svr7 ~]# cp /root/ks.cfg  /var/www/html/
[root@svr7 ~]# ls /var/www/html/
ks.cfg  rhel7
[root@svr7 ~]# firefox 192.168.4.7/ks.cfg

修改菜单文件，指定应答文件位置
# vim /var/lib/tftpboot/pxelinux.cfg/default 

label linux
menu label Install RHEL7
menu default
kernel vmlinuz
append initrd=initrd.img ks=http://192.168.4.7/ks.cfg

##################################################

总结：
 1.DHCP--->IP地址、next-server、filename
 2.tftp--->pxelinux.0
 3.pxelinux.0--->default
 4.default---》
          vesamenu.c32/splash.png/vmlinuz/initrd.img
          ks=http://192.168.4.7/ks.cfg

 5.ks.cfg----》--url="http://192.168.4.7/rhel7"

################################################




  PATH变量：提供命令搜寻路径

[root@svr7 ~]# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
[root@svr7 ~]# vim /opt/hello.sh
 #!/bin/bash
  echo hahaxixi
[root@svr7 ~]# chmod +x /opt/hello.sh
[root@svr7 ~]# /opt/hello.sh

[root@svr7 ~]# hello.sh   #执行失败
[root@svr7 ~]# cp  /opt/hello.sh   /usr/bin[root@svr7 ~]# hello.sh   #执行成功

rsync同步操作

• 命令用法
– rsync [选项...] 源目录      目标目录

• 同步与复制的差异
– 复制:完全拷贝源到目标
– 同步:增量拷贝,只传输变化过的数据



• 本地同步
– rsync [选项...] 本地目录1   本地目录2
– rsync [选项...] 本地目录1/   本地目录2

# mkdir /todir
# rsync -a /boot /todir/     /同步整个文件夹
# rsync -a /boot/ /todir/    //只同步目录下的数据


• rsync操作选项
 – -n:测试同步过程,不做实际修改
 – --delete:删除目标文件夹内多余的文档
 – -a:归档模式,相当于-rlptgoD
 – -v:显示详细操作信息
 – -z:传输过程中启用压缩/解压

[root@svr7 ~]# mkdir /test
[root@svr7 ~]# mkdir /abc

[root@svr7 ~]# cp -r /etc/passwd /home/  /test
[root@svr7 ~]# ls /test

[root@svr7 ~]# rsync -avz /test/  /abc
[root@svr7 ~]# ls /test
[root@svr7 ~]# ls /abc

[root@svr7 ~]# touch /test/{1..5}.txt
[root@svr7 ~]# ls /test
[root@svr7 ~]# rsync -avz /test/  /abc
[root@svr7 ~]# ls /test
[root@svr7 ~]# ls /abc
################################################

[root@svr7 ~]# rsync --delete -avz  /test/  /abc

[root@svr7 ~]# ls /test
[root@svr7 ~]# ls /abc

[root@svr7 ~]# touch /test/haha.txt /test/xixi.txt
[root@svr7 ~]# ls /test
[root@svr7 ~]# ls /abc

[root@svr7 ~]# rsync --delete -avz  /test/  /abc
[root@svr7 ~]# ls /test
[root@svr7 ~]# ls /abc

#################################################
rsync+SSH同步（远程同步）


• 与远程的 SSH目录保持同步
– 下行:rsync [...]  user@host:远程目录     本地目录
– 上行:rsync [...]  本地目录        user@host:远程目录

实现同步          
 将虚拟机A的/opt目录内容，同步到虚拟机B的/opt

虚拟机A:
# rsync --delete -avz  /opt/ root@192.168.4.207:/opt/
# ls  /opt

虚拟机B:
# ls  /opt

##################################################
实时同步

一、部署公钥  私钥，实现远程ssh无密码验证

虚拟机A：
1.生成公钥  私钥
[root@svr7 ~]# ssh-keygen   #一路回车
[root@svr7 ~]# ls /root/.ssh/
id_rsa  id_rsa.pub  known_hosts

2.传递公钥 到虚拟机B
[root@svr7 ~]# ssh-copy-id root@192.168.4.207

3.虚拟机B：查看
[root@pc207 ~]# ls /root/.ssh/
authorized_keys 
4.虚拟机A：测试无密码同步
[root@svr7 ~]# rsync --delete -avz  /opt/ root@192.168.4.207:/opt/

二、监控目录内容的变化

• Linux内核的 inotify 机制
– 提供事件响应式的文件系统通知机制
– 安装 inotify-tools 控制工具可调用此机制实现监控

1.真机传递tools.tar.gz到虚拟机A
# scp /root/桌面/tools.tar.gz  root@192.168.4.7:/root

2.虚拟机A验证：
[root@svr7 ~]# ls /root/
 tools.tar.gz  
[root@svr7 ~]# 

3.安装源码包
# mkdir /nsd
# tar -xf /root/tools.tar.gz -C /nsd
# tar -xf /nsd/tools/inotify-tools-3.13.tar.gz -C /root/
步骤1:安装gcc与make
步骤2:  ./configure 配置,指定安装目录/功能模块等选项
 # cd  /root/inotify-tools-3.13/
 # ./configure 
步骤4:make 编译,生成可执行的二进制程序文件
 # make
步骤5:make install 安装,将编译好的文件复制到安装目录
 # make install
 # ls  /usr/local/bin/inotifywait   #验证程序产生

###############################################

inotifywait监控
• 基本用法
– inotifywait [选项] 目标文件夹

• 常用命令选项
– -m,持续监控(捕获一个事件后不退出)
– -r,递归监控、包括子目录及文件
– -q,减少屏幕输出信息
– -e,指定监视的 modify、move、create、delete、attrib 等事件类别

三、书写Shell脚本完成，实时同步

       死循环： while

     while  [条件]
     do
              重复执行的代码
     done


[root@svr7 /]# vim /root/rsync.sh
#!/bin/bash
while  inotifywait -rqq  /opt 
do
 rsync --delete -az /opt/ root@192.168.4.207:/opt/
done  &
[root@svr7 /]# 

################################################



Cobbler装机平台,不同版本的多系统的安装

一  安装一个CentOS虚拟机  
真机: 
[root@room9pc01 ~]# ls /iso/
CentOS-7-x86_64-DVD-1708.iso

虚拟机要求:
             1.硬盘大小50G
             2.网络类型private1
             3.软件包选择 "带GUI的服务器"
             4.分区选择 "自动分区"

             5.将CentOS放入光驱设备,搭建本地Yum仓库
             6.配置IP地址:192.168.4.120/24
             7.配置主机名:Cobbler.tedu.cn
##################################################
zip压缩与解压缩（跨平台）

压缩：
    zip -r  /路径/压缩包名.zip   被压缩的源文档

解压缩：
    unzip   /路径/压缩包名.zip  -d  指定释放位置

# zip -r /opt/nsd.zip /home /etc/passwd
# ls /opt/
# unzip /opt/nsd.zip -d /opt/rh/
# ls /opt/rh

# zip -r /opt/test.zip /etc/shadow  /etc/fstab
# ls /opt/
# unzip /opt/test.zip -d /opt/rh/


###################################################
二、虚拟机设置  
   1.设置防火墙为trusted
  # firewall-cmd  --set-default-zone=trusted 

   2.当前及永久设置SELinux状态为permissive
 [root@Cobbler ~]# setenforce 0    #当前临时关闭
 [root@Cobbler ~]# getenforce 
 [root@Cobbler ~]# vim /etc/selinux/config 
  SELINUX=permissive



三、利用scp真机传递Cobbler.zip包到虚拟机192.168.4.120中
 # scp /root/桌面/Cobbler.zip   root@192.168.4.120:/root/
 	

##################################################
重设root密码  

案例1:为虚拟机 server 重设管理密码
1)重启系统,进入 recovery 恢复模式(修复模式) 
按e键，找到 linux16 行，末尾添加 rd.break console=tty0
按 ctrl + x 启动
2)以可写方式重新挂载 /sysroot,并切换到此环境
switch_root# mount  -o  remount,rw  /sysroot
switch_root# chroot  /sysroot    
sh-3.2#
3)将root用户的密码设置为 redhat
# echo  redhat  |  passwd  --stdin  root
4)重设SELinux安全标签(安全增强版Linux)
# touch  /.autorelabel    #让  SElinux  失忆
5)先后执行 exit、reboot 完成修复
# exit
# reboot




##################################################
四、搭建Cobbler装机平台

  Cobbler概述软件，管理dhcp、tftp、Web服务
    自由的导入镜像与ks应答文件

1.解压Cobbler.zip包
# unzip /root/Cobbler.zip -d /
# cd /Cobbler/
# ls

# unzip /Cobbler/cobbler.zip  -d  /opt/ 
# ls /opt/cobbler

#####################################################
五、安装cobbler主程序、工具包等
[root@cobbler /]# yum -y install /opt/cobbler/*.rpm

################################################################
cobbler网络装机部署

1.安装软件 cobbler cobbler-web dhcp tftp-server pykickstart httpd  tftp-server 

 cobbler         #cobbler程序包
 cobbler-web     #cobbler的web服务包
 pykickstart     #cobbler检查kickstart语法错误
 httpd           #Apache web服务
 dhcp            #dhcp服务
 tftp-server     #tftp服务

2.配置cobbler
[root@cobbler /]# vim  /etc/cobbler/settings

 272 next_server:   192.168.4.120   #设置下一个服务器还为本机
 384 server:   192.168.4.120        #设置本机为cobbler服务器
 242 manage_dhcp:   1               #设置cobbler管理dhcp服务
 292 pxe_just_once:   1             #防止客户端重复安装操作系统

 开机启动： 匹配及停止  
     1.硬盘启动     2.光驱设备      3.U盘      4.网络引导  















3.配置cobbler的dhcp
[root@svr7 /]# vim  /etc/cobbler/dhcp.template 

  :%s  /旧/新/g      #全文替换

  :%s  /192.168.1/192.168.4/g    #全文替换

    5 次替换，共 4 行   

4.绝对路径解压cobbler_boot.tar.gz    #众多的引导文件

# tar -tf  /Cobbler/cobbler_boot.tar.gz   #查看包里面内容
# tar -xPf  /Cobbler/cobbler_boot.tar.gz  #绝对路径释放

# ls  /var/lib/cobbler/loaders/

5.启动相关服务
[root@svr7 /]# systemctl restart cobblerd
[root@svr7 /]# systemctl enable cobblerd

[root@svr7 /]# systemctl restart httpd
[root@svr7 /]# systemctl enable httpd

[root@svr7 /]# systemctl restart tftp
[root@svr7 /]# systemctl enable tftp

[root@svr7 /]# systemctl restart rsyncd   #同步服务
[root@svr7 /]# systemctl enable rsyncd

6.同步刷新cobbler配置
[root@svr7 /]# cobbler sync
......
*** TASK COMPLETE ***


[root@svr7 /]# firefox https://192.168.4.120/cobbler_web

   用户名：cobbler
   密码：cobbler




##########################################################################################################
cobbler应用

  cobbler import  --path=挂载点   --name=导入系统命名（随意起）
导入安装镜像数据

# mount /dev/cdrom  /dvd

# ls /dvd/

# cobbler import --path=/dvd  --name=CentOS7

cobbler导入的镜像放在：/var/www/cobbler/ks_mirror

[root@cobbler /]# cobbler list    #查看有哪些系统
distros:
   CentOS7-x86_64        #安装客户端至少2G内存

profiles:
   CentOS7-x86_64

##############################################
删除
# cobbler list 
# cobbler profile remove --name=CentOS7-x86_64  #删除菜单信息
# cobbler distro remove --name=CentOS7-x86_64  #删除镜像信息


###########################################

# umount /dvd/
# mount /dev/cdrom  /dvd   将光盘换成RHEL7
# ls /dvd/

  安装完成机器 默认root  密码  cobbler

############################################################################################################
自定义应答文件：开头注释行删除


[root@cobbler ~]# system-config-kickstart  #生成ks文件

[root@cobbler ~]# vim ks.cfg
【自定义应答文件：开头注释行删除】 
#platform=x86, AMD64, 或 Intel EM64T  【删除】
#version=DEVEL				【删除】
# Install OS instead of upgrade	【删除】
install	【保留】
................

必须默认kickstart文件存放位置：/var/lib/cobbler/kickstarts/

[root@cobbler ~]# cobbler list

修改kickstart文件：
[root@cobbler ~]# cobbler profile edit --name=CentOS7.4-A  --kickstart=/var/lib/cobbler/kickstarts/自定义.cfg

[root@cobbler ~]# cobbler profile report
[root@cobbler ~]# cobbler sync  #同步配置

############################################################################################################

环境准备
[root@room9pc01 ~]# rht-vmctl reset classroom
classroom [OK]
域 classroom 已开始

[root@room9pc01 ~]# rht-vmctl reset server
server [OK]
域 server 已开始

[root@room9pc01 ~]# rht-vmctl reset desktop
desktop [OK]
域 desktop 已开始


################################################
配置聚合连接(也称为链路聚合)


                eth0       eth1

                   虚拟网卡       haxi0  192.168.1.1


• team,聚合连接(也称为链路聚合)
– 由多块网卡(team-slave)一起组建而成的虚拟网卡,即“组队”

– 作用1:轮询式(roundrobin)的流量负载均衡
– 作用2:热备份(activebackup)连接冗余

制作链路聚合：
1.建立虚拟的网卡team0   参考 man teamd.conf
# nmcli connection add  type team con-name team0 
  ifname team0   autoconnect yes     
  config '{"runner": {"name": "activebackup"}}'

解析：nmcli connection  添加   类型  为team
         配置文件名为 team0   网卡名为  team0  每次开机自动启用
         链路聚合的工作模式为   热备份

# ifconfig 

如果有敲错，一定要删除
# nmcli connection delete team0   #删除配置

2.添加成员
# nmcli connection add type team-slave  
 con-name team0-1 ifname  eth1   master team0

# nmcli connection add type team-slave  
 con-name team0-2 ifname  eth2   master team0

解析：nmcli connection 添加   类型为  team的成员
          配置文件名  team0-1  网卡为 eth1  主设备为  team0

如果敲错，一定要删除配置
[root@server0 ~]# nmcli connection delete team0-1
[root@server0 ~]# nmcli connection delete team0-2

3.配值team0的IP地址
# nmcli connection modify team0       
 ipv4.method manual 
 ipv4.addresses 192.168.1.1/24      
 connection.autoconnect  yes

4.激活配置
[root@server0 ~]# nmcli connection up team0
[root@server0 ~]# nmcli connection up team0-1
[root@server0 ~]# nmcli connection up team0-2

##################################################
专用于显示team信息命令
[root@server0 ~]# teamdctl team0 state
[root@server0 ~]# ifconfig eth1 down
[root@server0 ~]# teamdctl team0 state


#################################################


   在真机上，利用clone-vm7新建一台虚拟机，名字:PXE-Server
  
   1.设置防火墙为trusted
   2.当前及永久关闭SELinux
   3.配置IP地址：192.168.4.122/24
   4.搭建Yum仓库   
   5.主机名：PXE.tedu.cn

######################################################
搭建一键装机平台
一 、搭建DHCP服务
1.安装dhcp
2.修改配置文件
subnet 192.168.4.0  netmask  255.255.255.0 {
  range 192.168.4.180  192.168.4.230;
  next-server  192.168.4.122;
  filename  "pxelinux.0";
}

3.重起dhcpd服务，设置开机自起动

#####################################################
二、搭建tftp

1.安装tftp-server
2.启动tftp服务，设置开机自起动


3. 部署pxeliunx.0
 # yum provides */pxelinux.0
 # rpm -ql syslinux | grep pxelinux.0

 # cp /usr/share/syslinux/pxelinux.0  /var/lib/tftpboot/

 # ls /var/lib/tftpboot/

4. 部署光盘内容
[root@PXE ~]# yum -y install httpd
[root@PXE ~]# mkdir /var/www/html/rhel6
[root@PXE ~]# mkdir /var/www/html/rhel7

[root@PXE ~]# mount /dev/cdrom  /mnt/    #光盘为rhel7
[root@PXE ~]# ls /mnt/
[root@PXE ~]# cp -r  /mnt/*    /var/www/html/rhel7/

[root@PXE ~]# umount  /mnt
[root@PXE ~]# mount /dev/cdrom  /mnt/   #光盘为rhel6
[root@PXE ~]# ls /mnt/
[root@PXE ~]# cp -r  /mnt/*    /var/www/html/rhel6/

[root@PXE ~]# du  -sh /var/www/html/rhel7/
[root@PXE ~]# du  -sh /var/www/html/rhel6/


5.部署rhel7、rhel6   的启动内核与驱动程序

# mkdir /var/lib/tftpboot/rhel6
# mkdir /var/lib/tftpboot/rhel7

# cp /var/www/html/rhel6/isolinux/vmlinuz   
     /var/www/html/rhel6/isolinux/initrd.img            
     /var/lib/tftpboot/rhel6/

# cp /var/www/html/rhel7/isolinux/vmlinuz  
     /var/www/html/rhel7/isolinux/initrd.img               
     /var/lib/tftpboot/rhel7/

# ls /var/lib/tftpboot/rhel7
# ls /var/lib/tftpboot/rhel6


6.部署图形模块与背景
# cp /var/www/html/rhel6/isolinux/vesamenu.c32  
     /var/lib/tftpboot/

# rpm -ql syslinux | grep jpg

# cp /usr/share/doc/syslinux-4.05/sample/syslinux_splash.jpg   /var/lib/tftpboot/
 

# ls /var/lib/tftpboot/

7.部署菜单文件
# mkdir /var/lib/tftpboot/pxelinux.cfg

# cp /var/www/html/rhel6/isolinux/isolinux.cfg 
     /var/lib/tftpboot/pxelinux.cfg/default

# chmod 644 /var/lib/tftpboot/pxelinux.cfg/default

# ls -l /var/lib/tftpboot/pxelinux.cfg/default


8.修改菜单文件内容
# vim /var/lib/tftpboot/pxelinux.cfg/default
......
menu background syslinux_splash.jpg
menu title Welcome to PXE Server!
......
label linux
  menu label Install RHEL7.2
  kernel rhel7/vmlinuz
  append initrd=rhel7/initrd.img

label vesa
  menu label Install RHEL6.7
  kernel rhel6/vmlinuz
  append initrd=rhel6/initrd.img 

label local
  menu label Boot from local drive
  menu default                    #读秒结束最后默认选择
  localboot 0xffff



#####################################################
三、搭建httpd服务共享光盘所有内容

1.启动服务
[root@PXE /]# systemctl restart httpd
[root@PXE /]# systemctl enable httpd

2.测试访问
[root@PXE /]# firefox  http://192.168.4.122/rhel6
[root@PXE /]# firefox  http://192.168.4.122/rhel7

####################################################
四、生成ks文件
[root@PXE /]# yum -y install system-config-kickstart

  修改Yum客户端配置文件的标示名
   [development]


[root@PXE /]# system-config-kickstart  #先看“软件包选择”
        软件包选择：  在“桌面”一栏选择----->第一个为GNOME  则为rhel7

    RHEL7的文件系统为xfs
#####################################################

[root@PXE ~]# vim /etc/yum.repos.d/rhel7.repo 
     执行向rhel6的光盘

 [development]
 name=rhel7
 baseurl=http://192.168.4.122/rhel6
 enabled=1
 gpgcheck=0

[root@PXE ~]# yum clean all       #清空Yum缓存

[root@PXE ~]# system-config-kickstart 
        软件包选择：  在“桌面”一栏选择----->第一个为KDE桌面  则为rhel6

    RHEL6的文件系统为ext4

[root@PXE ~]# ls /root/ks*
/root/ks6.cfg  /root/ks7.cfg

#############################################
五、指定ks应答文件

1.共享ks应答文件
[root@PXE ~]# cp /root/ks*  /var/www/html/
[root@PXE ~]# ls /var/www/html/

2.修改菜单文件

# vim /var/lib/tftpboot/pxelinux.cfg/default

label linux
  menu label Install RHEL7.2
  kernel rhel7/vmlinuz
  append initrd=rhel7/initrd.img ks=http://192.168.4.122/ks7.cfg

label vesa
  menu label Install RHEL6.7
  kernel rhel6/vmlinuz
  append initrd=rhel6/initrd.img ks=http://192.168.4.122/ks6.cfg


####################################################





































































































































































































 











































































